[General]
num-rngs = 3
debug-on-errors = true


# save results in sqlite format
output-vector-file = ${resultdir}/${configname}-${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}-${runnumber}.sca
outputscalarmanager-class = "omnetpp::envir::SqliteOutputScalarManager"
outputvectormanager-class = "omnetpp::envir::SqliteOutputVectorManager"

# non-default statistics rercording
*.initialServers.param-record-as-scalar = true
*.maxServers.param-record-as-scalar = true
*.bootDelay.param-record-as-scalar = true
*.numberOfBrownoutLevels.param-record-as-scalar = true
*.evaluationPeriod.param-record-as-scalar = true
*.responseTimeThreshold.param-record-as-scalar = true
*.maxServiceRate.param-record-as-scalar = true

network = SWIM_SA
result-dir = ../../../results/SWIM_SA

# simulation input and duration
*.source.interArrivalsFile = ${trace = "traces/60to12030k.delta"}
sim-time-limit = 30000s
warmup-period = 500s

# adaptation loop period
*.evaluationPeriod = 60

# adaptation manager params
*.numberOfBrownoutLevels = 3
*.dimmerMargin = 0.1
*.responseTimeThreshold = 0.75s

# server pool configuration
*.maxServers = 5
*.initialServers = 3

# server config
**.server*.server.threads = 100
**.server*.server.brownoutFactor = 0.0
**.server*.server.timeout = 10s

# for plotting, use latency as iteration variable even if no iteration is needed
*.bootDelay = 0 # deterministic boot times
#*.bootDelay = truncnormal( ${latency = 0, 60, 120, 180, 240}, ${stddev=($latency)/10} ) # random boot times

# service time configuration
**.server*.server.serviceTime = truncnormal(0.030s,0.030s)
**.server*.server.lowFidelityServiceTime = truncnormal(0.001s,0.001s)

# this is used for the SEAMS'17 CobRA-PLA utility function
*.maxServiceRate = 1 / 0.04452713 # typically the inverse of the normal service time


[Config pyUCBAO2]
*.adaptationManagerType = "PythonAdaptationManager"
*.banditAlgorithmName = "ucb"
*.banditFormulaType = "AO" #asymptotically optimal 

[Config Reactive]
*.adaptationManagerType = "ReactiveAdaptationManager"
repeat = 30

[Config Reactive2]
*.adaptationManagerType = "ReactiveAdaptationManager2"

[Config Python]
*.adaptationManagerType = "PythonAdaptationManager"
repeat = 30

[Config pyUCBAO]
extends = Python
*.banditAlgorithmName = "ucb"
*.banditFormulaType = "AO" #asymptotically optimal 

[Config pyRANDM]
extends = Python
*.banditAlgorithmName = "randomexplore"
*.banditFormulaType = "AO" #asymptotically optimal 

[Config pyUCBFH]
extends = Python
*.banditAlgorithmName = "ucb"
*.banditFormulaType = "FH" #fixed horizon 

[Config pyUCBOG]
extends = Python
*.banditAlgorithmName = "ucb"
*.banditFormulaType = "OG" #fixed horizon 

[Config pyUCBIM]
extends = Python
*.banditAlgorithmName = "ucbImproved"
*.banditFormulaType = "" #ucb-1

[Config pyUCBNM]
extends = Python
*.banditAlgorithmName = "ucbnorm"
*.banditFormulaType = "OG" #fixed horizon 

[Config pyUCBTN]
extends = Python
*.banditAlgorithmName = "ucb"
*.banditFormulaType = "TN" #fixed horizon 

[Config pyEXP3FH]
extends = Python
*.banditAlgorithmName = "EXP3"
*.banditFormulaType = "FH" #fixed horizon 

[Config pyEXP4]
extends = Python
*.banditAlgorithmName = "exp4"
*.banditFormulaType = "FH" #fixed horizon 

[Config pyEXP3AT]
extends = Python
*.banditAlgorithmName = "EXP3"
*.banditFormulaType = "AT" #anytime

[Config pySWUCB]
extends = Python
*.banditAlgorithmName = "SWUCB"
*.banditFormulaType = "AT" #anytime
*.slidingWindowSize = "130"

[Config pyEGreedy]
extends = Python
*.banditAlgorithmName = "eGreedy"
*.banditFormulaType = "" #n/a
repeat = 30

[Config pyExploreOnly]
extends = Python
*.banditAlgorithmName = "exploreOnly"



[Config Dummy]
*.adaptationManagerType = "DummyAdaptationManager"
repeat = 30
